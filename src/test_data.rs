// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `test_data.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
pub struct Person {
    // message fields
    pub name: ::std::string::String,
    pub id: i32,
    pub email: ::std::string::String,
    pub phones: ::protobuf::RepeatedField<Person_PhoneNumber>,
    pub last_updated: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Person {
    fn default() -> &'a Person {
        <Person as ::protobuf::Message>::default_instance()
    }
}

impl Person {
    pub fn new() -> Person {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int32 id = 2;


    pub fn get_id(&self) -> i32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i32) {
        self.id = v;
    }

    // string email = 3;


    pub fn get_email(&self) -> &str {
        &self.email
    }
    pub fn clear_email(&mut self) {
        self.email.clear();
    }

    // Param is passed by value, moved
    pub fn set_email(&mut self, v: ::std::string::String) {
        self.email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_email(&mut self) -> &mut ::std::string::String {
        &mut self.email
    }

    // Take field
    pub fn take_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.email, ::std::string::String::new())
    }

    // repeated .protodec.Person.PhoneNumber phones = 4;


    pub fn get_phones(&self) -> &[Person_PhoneNumber] {
        &self.phones
    }
    pub fn clear_phones(&mut self) {
        self.phones.clear();
    }

    // Param is passed by value, moved
    pub fn set_phones(&mut self, v: ::protobuf::RepeatedField<Person_PhoneNumber>) {
        self.phones = v;
    }

    // Mutable pointer to the field.
    pub fn mut_phones(&mut self) -> &mut ::protobuf::RepeatedField<Person_PhoneNumber> {
        &mut self.phones
    }

    // Take field
    pub fn take_phones(&mut self) -> ::protobuf::RepeatedField<Person_PhoneNumber> {
        ::std::mem::replace(&mut self.phones, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.Timestamp last_updated = 5;


    pub fn get_last_updated(&self) -> &::protobuf::well_known_types::Timestamp {
        self.last_updated.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_last_updated(&mut self) {
        self.last_updated.clear();
    }

    pub fn has_last_updated(&self) -> bool {
        self.last_updated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_updated(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.last_updated = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_updated(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.last_updated.is_none() {
            self.last_updated.set_default();
        }
        self.last_updated.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_updated(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.last_updated.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for Person {
    fn is_initialized(&self) -> bool {
        for v in &self.phones {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.last_updated {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.email)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.phones)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.last_updated)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.email);
        }
        for value in &self.phones {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.last_updated.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.id != 0 {
            os.write_int32(2, self.id)?;
        }
        if !self.email.is_empty() {
            os.write_string(3, &self.email)?;
        }
        for v in &self.phones {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.last_updated.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Person {
        Person::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Person| { &m.name },
                    |m: &mut Person| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "id",
                    |m: &Person| { &m.id },
                    |m: &mut Person| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "email",
                    |m: &Person| { &m.email },
                    |m: &mut Person| { &mut m.email },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Person_PhoneNumber>>(
                    "phones",
                    |m: &Person| { &m.phones },
                    |m: &mut Person| { &mut m.phones },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "last_updated",
                    |m: &Person| { &m.last_updated },
                    |m: &mut Person| { &mut m.last_updated },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Person>(
                    "Person",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Person {
        static mut instance: ::protobuf::lazy::Lazy<Person> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Person::new)
        }
    }
}

impl ::protobuf::Clear for Person {
    fn clear(&mut self) {
        self.name.clear();
        self.id = 0;
        self.email.clear();
        self.phones.clear();
        self.last_updated.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Person {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Person {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Person_PhoneNumber {
    // message fields
    pub number: ::std::string::String,
    pub field_type: Person_PhoneType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Person_PhoneNumber {
    fn default() -> &'a Person_PhoneNumber {
        <Person_PhoneNumber as ::protobuf::Message>::default_instance()
    }
}

impl Person_PhoneNumber {
    pub fn new() -> Person_PhoneNumber {
        ::std::default::Default::default()
    }

    // string number = 1;


    pub fn get_number(&self) -> &str {
        &self.number
    }
    pub fn clear_number(&mut self) {
        self.number.clear();
    }

    // Param is passed by value, moved
    pub fn set_number(&mut self, v: ::std::string::String) {
        self.number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_number(&mut self) -> &mut ::std::string::String {
        &mut self.number
    }

    // Take field
    pub fn take_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.number, ::std::string::String::new())
    }

    // .protodec.Person.PhoneType type = 2;


    pub fn get_field_type(&self) -> Person_PhoneType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = Person_PhoneType::MOBILE;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Person_PhoneType) {
        self.field_type = v;
    }
}

impl ::protobuf::Message for Person_PhoneNumber {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.number)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.number.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.number);
        }
        if self.field_type != Person_PhoneType::MOBILE {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.number.is_empty() {
            os.write_string(1, &self.number)?;
        }
        if self.field_type != Person_PhoneType::MOBILE {
            os.write_enum(2, self.field_type.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Person_PhoneNumber {
        Person_PhoneNumber::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "number",
                    |m: &Person_PhoneNumber| { &m.number },
                    |m: &mut Person_PhoneNumber| { &mut m.number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Person_PhoneType>>(
                    "type",
                    |m: &Person_PhoneNumber| { &m.field_type },
                    |m: &mut Person_PhoneNumber| { &mut m.field_type },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Person_PhoneNumber>(
                    "Person.PhoneNumber",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Person_PhoneNumber {
        static mut instance: ::protobuf::lazy::Lazy<Person_PhoneNumber> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Person_PhoneNumber::new)
        }
    }
}

impl ::protobuf::Clear for Person_PhoneNumber {
    fn clear(&mut self) {
        self.number.clear();
        self.field_type = Person_PhoneType::MOBILE;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Person_PhoneNumber {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Person_PhoneNumber {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Person_PhoneType {
    MOBILE = 0,
    HOME = 1,
    WORK = 2,
}

impl ::protobuf::ProtobufEnum for Person_PhoneType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Person_PhoneType> {
        match value {
            0 => ::std::option::Option::Some(Person_PhoneType::MOBILE),
            1 => ::std::option::Option::Some(Person_PhoneType::HOME),
            2 => ::std::option::Option::Some(Person_PhoneType::WORK),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Person_PhoneType] = &[
            Person_PhoneType::MOBILE,
            Person_PhoneType::HOME,
            Person_PhoneType::WORK,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new_pb_name::<Person_PhoneType>("Person.PhoneType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Person_PhoneType {
}

impl ::std::default::Default for Person_PhoneType {
    fn default() -> Self {
        Person_PhoneType::MOBILE
    }
}

impl ::protobuf::reflect::ProtobufValue for Person_PhoneType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddressBook {
    // message fields
    pub people: ::protobuf::RepeatedField<Person>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddressBook {
    fn default() -> &'a AddressBook {
        <AddressBook as ::protobuf::Message>::default_instance()
    }
}

impl AddressBook {
    pub fn new() -> AddressBook {
        ::std::default::Default::default()
    }

    // repeated .protodec.Person people = 1;


    pub fn get_people(&self) -> &[Person] {
        &self.people
    }
    pub fn clear_people(&mut self) {
        self.people.clear();
    }

    // Param is passed by value, moved
    pub fn set_people(&mut self, v: ::protobuf::RepeatedField<Person>) {
        self.people = v;
    }

    // Mutable pointer to the field.
    pub fn mut_people(&mut self) -> &mut ::protobuf::RepeatedField<Person> {
        &mut self.people
    }

    // Take field
    pub fn take_people(&mut self) -> ::protobuf::RepeatedField<Person> {
        ::std::mem::replace(&mut self.people, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AddressBook {
    fn is_initialized(&self) -> bool {
        for v in &self.people {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.people)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.people {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.people {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddressBook {
        AddressBook::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Person>>(
                    "people",
                    |m: &AddressBook| { &m.people },
                    |m: &mut AddressBook| { &mut m.people },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<AddressBook>(
                    "AddressBook",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AddressBook {
        static mut instance: ::protobuf::lazy::Lazy<AddressBook> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(AddressBook::new)
        }
    }
}

impl ::protobuf::Clear for AddressBook {
    fn clear(&mut self) {
        self.people.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddressBook {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddressBook {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StringWrapper {
    // message fields
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StringWrapper {
    fn default() -> &'a StringWrapper {
        <StringWrapper as ::protobuf::Message>::default_instance()
    }
}

impl StringWrapper {
    pub fn new() -> StringWrapper {
        ::std::default::Default::default()
    }

    // string value = 1;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for StringWrapper {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StringWrapper {
        StringWrapper::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &StringWrapper| { &m.value },
                    |m: &mut StringWrapper| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<StringWrapper>(
                    "StringWrapper",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StringWrapper {
        static mut instance: ::protobuf::lazy::Lazy<StringWrapper> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(StringWrapper::new)
        }
    }
}

impl ::protobuf::Clear for StringWrapper {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StringWrapper {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StringWrapper {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StringWrapperWrapper {
    // message fields
    pub value: ::protobuf::SingularPtrField<StringWrapper>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StringWrapperWrapper {
    fn default() -> &'a StringWrapperWrapper {
        <StringWrapperWrapper as ::protobuf::Message>::default_instance()
    }
}

impl StringWrapperWrapper {
    pub fn new() -> StringWrapperWrapper {
        ::std::default::Default::default()
    }

    // .protodec.StringWrapper value = 1;


    pub fn get_value(&self) -> &StringWrapper {
        self.value.as_ref().unwrap_or_else(|| StringWrapper::default_instance())
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: StringWrapper) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut StringWrapper {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> StringWrapper {
        self.value.take().unwrap_or_else(|| StringWrapper::new())
    }
}

impl ::protobuf::Message for StringWrapperWrapper {
    fn is_initialized(&self) -> bool {
        for v in &self.value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.value.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StringWrapperWrapper {
        StringWrapperWrapper::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<StringWrapper>>(
                    "value",
                    |m: &StringWrapperWrapper| { &m.value },
                    |m: &mut StringWrapperWrapper| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<StringWrapperWrapper>(
                    "StringWrapperWrapper",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StringWrapperWrapper {
        static mut instance: ::protobuf::lazy::Lazy<StringWrapperWrapper> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(StringWrapperWrapper::new)
        }
    }
}

impl ::protobuf::Clear for StringWrapperWrapper {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StringWrapperWrapper {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StringWrapperWrapper {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct I32Wrapper {
    // message fields
    pub value: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a I32Wrapper {
    fn default() -> &'a I32Wrapper {
        <I32Wrapper as ::protobuf::Message>::default_instance()
    }
}

impl I32Wrapper {
    pub fn new() -> I32Wrapper {
        ::std::default::Default::default()
    }

    // int32 value = 1;


    pub fn get_value(&self) -> i32 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: i32) {
        self.value = v;
    }
}

impl ::protobuf::Message for I32Wrapper {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.value = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.value != 0 {
            my_size += ::protobuf::rt::value_size(1, self.value, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.value != 0 {
            os.write_int32(1, self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> I32Wrapper {
        I32Wrapper::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "value",
                    |m: &I32Wrapper| { &m.value },
                    |m: &mut I32Wrapper| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<I32Wrapper>(
                    "I32Wrapper",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static I32Wrapper {
        static mut instance: ::protobuf::lazy::Lazy<I32Wrapper> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(I32Wrapper::new)
        }
    }
}

impl ::protobuf::Clear for I32Wrapper {
    fn clear(&mut self) {
        self.value = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for I32Wrapper {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for I32Wrapper {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BigObject {
    // message fields
    pub address_book: ::protobuf::SingularPtrField<AddressBook>,
    pub different_numbers_wrapper: ::protobuf::SingularPtrField<DifferentNumbersWrapper>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BigObject {
    fn default() -> &'a BigObject {
        <BigObject as ::protobuf::Message>::default_instance()
    }
}

impl BigObject {
    pub fn new() -> BigObject {
        ::std::default::Default::default()
    }

    // .protodec.AddressBook address_book = 1;


    pub fn get_address_book(&self) -> &AddressBook {
        self.address_book.as_ref().unwrap_or_else(|| AddressBook::default_instance())
    }
    pub fn clear_address_book(&mut self) {
        self.address_book.clear();
    }

    pub fn has_address_book(&self) -> bool {
        self.address_book.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address_book(&mut self, v: AddressBook) {
        self.address_book = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address_book(&mut self) -> &mut AddressBook {
        if self.address_book.is_none() {
            self.address_book.set_default();
        }
        self.address_book.as_mut().unwrap()
    }

    // Take field
    pub fn take_address_book(&mut self) -> AddressBook {
        self.address_book.take().unwrap_or_else(|| AddressBook::new())
    }

    // .protodec.DifferentNumbersWrapper different_numbers_wrapper = 2;


    pub fn get_different_numbers_wrapper(&self) -> &DifferentNumbersWrapper {
        self.different_numbers_wrapper.as_ref().unwrap_or_else(|| DifferentNumbersWrapper::default_instance())
    }
    pub fn clear_different_numbers_wrapper(&mut self) {
        self.different_numbers_wrapper.clear();
    }

    pub fn has_different_numbers_wrapper(&self) -> bool {
        self.different_numbers_wrapper.is_some()
    }

    // Param is passed by value, moved
    pub fn set_different_numbers_wrapper(&mut self, v: DifferentNumbersWrapper) {
        self.different_numbers_wrapper = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_different_numbers_wrapper(&mut self) -> &mut DifferentNumbersWrapper {
        if self.different_numbers_wrapper.is_none() {
            self.different_numbers_wrapper.set_default();
        }
        self.different_numbers_wrapper.as_mut().unwrap()
    }

    // Take field
    pub fn take_different_numbers_wrapper(&mut self) -> DifferentNumbersWrapper {
        self.different_numbers_wrapper.take().unwrap_or_else(|| DifferentNumbersWrapper::new())
    }
}

impl ::protobuf::Message for BigObject {
    fn is_initialized(&self) -> bool {
        for v in &self.address_book {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.different_numbers_wrapper {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.address_book)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.different_numbers_wrapper)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address_book.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.different_numbers_wrapper.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address_book.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.different_numbers_wrapper.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BigObject {
        BigObject::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AddressBook>>(
                    "address_book",
                    |m: &BigObject| { &m.address_book },
                    |m: &mut BigObject| { &mut m.address_book },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DifferentNumbersWrapper>>(
                    "different_numbers_wrapper",
                    |m: &BigObject| { &m.different_numbers_wrapper },
                    |m: &mut BigObject| { &mut m.different_numbers_wrapper },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<BigObject>(
                    "BigObject",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BigObject {
        static mut instance: ::protobuf::lazy::Lazy<BigObject> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(BigObject::new)
        }
    }
}

impl ::protobuf::Clear for BigObject {
    fn clear(&mut self) {
        self.address_book.clear();
        self.different_numbers_wrapper.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BigObject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BigObject {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DifferentNumbersWrapper {
    // message fields
    pub value_double: f64,
    pub value_int32: i32,
    pub value_int64: i64,
    pub value_uint32: u32,
    pub value_uint64: u64,
    pub value_sint32: i32,
    pub value_sint64: i64,
    pub value_fixed32: u32,
    pub value_fixed64: u64,
    pub value_sfixed32: i32,
    pub value_sfixed64: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DifferentNumbersWrapper {
    fn default() -> &'a DifferentNumbersWrapper {
        <DifferentNumbersWrapper as ::protobuf::Message>::default_instance()
    }
}

impl DifferentNumbersWrapper {
    pub fn new() -> DifferentNumbersWrapper {
        ::std::default::Default::default()
    }

    // double value_double = 1;


    pub fn get_value_double(&self) -> f64 {
        self.value_double
    }
    pub fn clear_value_double(&mut self) {
        self.value_double = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value_double(&mut self, v: f64) {
        self.value_double = v;
    }

    // int32 value_int32 = 2;


    pub fn get_value_int32(&self) -> i32 {
        self.value_int32
    }
    pub fn clear_value_int32(&mut self) {
        self.value_int32 = 0;
    }

    // Param is passed by value, moved
    pub fn set_value_int32(&mut self, v: i32) {
        self.value_int32 = v;
    }

    // int64 value_int64 = 3;


    pub fn get_value_int64(&self) -> i64 {
        self.value_int64
    }
    pub fn clear_value_int64(&mut self) {
        self.value_int64 = 0;
    }

    // Param is passed by value, moved
    pub fn set_value_int64(&mut self, v: i64) {
        self.value_int64 = v;
    }

    // uint32 value_uint32 = 4;


    pub fn get_value_uint32(&self) -> u32 {
        self.value_uint32
    }
    pub fn clear_value_uint32(&mut self) {
        self.value_uint32 = 0;
    }

    // Param is passed by value, moved
    pub fn set_value_uint32(&mut self, v: u32) {
        self.value_uint32 = v;
    }

    // uint64 value_uint64 = 5;


    pub fn get_value_uint64(&self) -> u64 {
        self.value_uint64
    }
    pub fn clear_value_uint64(&mut self) {
        self.value_uint64 = 0;
    }

    // Param is passed by value, moved
    pub fn set_value_uint64(&mut self, v: u64) {
        self.value_uint64 = v;
    }

    // sint32 value_sint32 = 6;


    pub fn get_value_sint32(&self) -> i32 {
        self.value_sint32
    }
    pub fn clear_value_sint32(&mut self) {
        self.value_sint32 = 0;
    }

    // Param is passed by value, moved
    pub fn set_value_sint32(&mut self, v: i32) {
        self.value_sint32 = v;
    }

    // sint64 value_sint64 = 7;


    pub fn get_value_sint64(&self) -> i64 {
        self.value_sint64
    }
    pub fn clear_value_sint64(&mut self) {
        self.value_sint64 = 0;
    }

    // Param is passed by value, moved
    pub fn set_value_sint64(&mut self, v: i64) {
        self.value_sint64 = v;
    }

    // fixed32 value_fixed32 = 8;


    pub fn get_value_fixed32(&self) -> u32 {
        self.value_fixed32
    }
    pub fn clear_value_fixed32(&mut self) {
        self.value_fixed32 = 0;
    }

    // Param is passed by value, moved
    pub fn set_value_fixed32(&mut self, v: u32) {
        self.value_fixed32 = v;
    }

    // fixed64 value_fixed64 = 9;


    pub fn get_value_fixed64(&self) -> u64 {
        self.value_fixed64
    }
    pub fn clear_value_fixed64(&mut self) {
        self.value_fixed64 = 0;
    }

    // Param is passed by value, moved
    pub fn set_value_fixed64(&mut self, v: u64) {
        self.value_fixed64 = v;
    }

    // sfixed32 value_sfixed32 = 10;


    pub fn get_value_sfixed32(&self) -> i32 {
        self.value_sfixed32
    }
    pub fn clear_value_sfixed32(&mut self) {
        self.value_sfixed32 = 0;
    }

    // Param is passed by value, moved
    pub fn set_value_sfixed32(&mut self, v: i32) {
        self.value_sfixed32 = v;
    }

    // sfixed64 value_sfixed64 = 11;


    pub fn get_value_sfixed64(&self) -> i64 {
        self.value_sfixed64
    }
    pub fn clear_value_sfixed64(&mut self) {
        self.value_sfixed64 = 0;
    }

    // Param is passed by value, moved
    pub fn set_value_sfixed64(&mut self, v: i64) {
        self.value_sfixed64 = v;
    }
}

impl ::protobuf::Message for DifferentNumbersWrapper {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.value_double = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.value_int32 = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.value_int64 = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.value_uint32 = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.value_uint64 = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.value_sint32 = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.value_sint64 = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.value_fixed32 = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.value_fixed64 = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sfixed32()?;
                    self.value_sfixed32 = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sfixed64()?;
                    self.value_sfixed64 = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.value_double != 0. {
            my_size += 9;
        }
        if self.value_int32 != 0 {
            my_size += ::protobuf::rt::value_size(2, self.value_int32, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.value_int64 != 0 {
            my_size += ::protobuf::rt::value_size(3, self.value_int64, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.value_uint32 != 0 {
            my_size += ::protobuf::rt::value_size(4, self.value_uint32, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.value_uint64 != 0 {
            my_size += ::protobuf::rt::value_size(5, self.value_uint64, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.value_sint32 != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(6, self.value_sint32);
        }
        if self.value_sint64 != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(7, self.value_sint64);
        }
        if self.value_fixed32 != 0 {
            my_size += 5;
        }
        if self.value_fixed64 != 0 {
            my_size += 9;
        }
        if self.value_sfixed32 != 0 {
            my_size += 5;
        }
        if self.value_sfixed64 != 0 {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.value_double != 0. {
            os.write_double(1, self.value_double)?;
        }
        if self.value_int32 != 0 {
            os.write_int32(2, self.value_int32)?;
        }
        if self.value_int64 != 0 {
            os.write_int64(3, self.value_int64)?;
        }
        if self.value_uint32 != 0 {
            os.write_uint32(4, self.value_uint32)?;
        }
        if self.value_uint64 != 0 {
            os.write_uint64(5, self.value_uint64)?;
        }
        if self.value_sint32 != 0 {
            os.write_sint32(6, self.value_sint32)?;
        }
        if self.value_sint64 != 0 {
            os.write_sint64(7, self.value_sint64)?;
        }
        if self.value_fixed32 != 0 {
            os.write_fixed32(8, self.value_fixed32)?;
        }
        if self.value_fixed64 != 0 {
            os.write_fixed64(9, self.value_fixed64)?;
        }
        if self.value_sfixed32 != 0 {
            os.write_sfixed32(10, self.value_sfixed32)?;
        }
        if self.value_sfixed64 != 0 {
            os.write_sfixed64(11, self.value_sfixed64)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DifferentNumbersWrapper {
        DifferentNumbersWrapper::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "value_double",
                    |m: &DifferentNumbersWrapper| { &m.value_double },
                    |m: &mut DifferentNumbersWrapper| { &mut m.value_double },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "value_int32",
                    |m: &DifferentNumbersWrapper| { &m.value_int32 },
                    |m: &mut DifferentNumbersWrapper| { &mut m.value_int32 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "value_int64",
                    |m: &DifferentNumbersWrapper| { &m.value_int64 },
                    |m: &mut DifferentNumbersWrapper| { &mut m.value_int64 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "value_uint32",
                    |m: &DifferentNumbersWrapper| { &m.value_uint32 },
                    |m: &mut DifferentNumbersWrapper| { &mut m.value_uint32 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "value_uint64",
                    |m: &DifferentNumbersWrapper| { &m.value_uint64 },
                    |m: &mut DifferentNumbersWrapper| { &mut m.value_uint64 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                    "value_sint32",
                    |m: &DifferentNumbersWrapper| { &m.value_sint32 },
                    |m: &mut DifferentNumbersWrapper| { &mut m.value_sint32 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                    "value_sint64",
                    |m: &DifferentNumbersWrapper| { &m.value_sint64 },
                    |m: &mut DifferentNumbersWrapper| { &mut m.value_sint64 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                    "value_fixed32",
                    |m: &DifferentNumbersWrapper| { &m.value_fixed32 },
                    |m: &mut DifferentNumbersWrapper| { &mut m.value_fixed32 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                    "value_fixed64",
                    |m: &DifferentNumbersWrapper| { &m.value_fixed64 },
                    |m: &mut DifferentNumbersWrapper| { &mut m.value_fixed64 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSfixed32>(
                    "value_sfixed32",
                    |m: &DifferentNumbersWrapper| { &m.value_sfixed32 },
                    |m: &mut DifferentNumbersWrapper| { &mut m.value_sfixed32 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSfixed64>(
                    "value_sfixed64",
                    |m: &DifferentNumbersWrapper| { &m.value_sfixed64 },
                    |m: &mut DifferentNumbersWrapper| { &mut m.value_sfixed64 },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<DifferentNumbersWrapper>(
                    "DifferentNumbersWrapper",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DifferentNumbersWrapper {
        static mut instance: ::protobuf::lazy::Lazy<DifferentNumbersWrapper> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(DifferentNumbersWrapper::new)
        }
    }
}

impl ::protobuf::Clear for DifferentNumbersWrapper {
    fn clear(&mut self) {
        self.value_double = 0.;
        self.value_int32 = 0;
        self.value_int64 = 0;
        self.value_uint32 = 0;
        self.value_uint64 = 0;
        self.value_sint32 = 0;
        self.value_sint64 = 0;
        self.value_fixed32 = 0;
        self.value_fixed64 = 0;
        self.value_sfixed32 = 0;
        self.value_sfixed64 = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DifferentNumbersWrapper {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DifferentNumbersWrapper {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Ta {
    // message fields
    pub tb: ::protobuf::SingularPtrField<Ta_Tb>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Ta {
    fn default() -> &'a Ta {
        <Ta as ::protobuf::Message>::default_instance()
    }
}

impl Ta {
    pub fn new() -> Ta {
        ::std::default::Default::default()
    }

    // .protodec.Ta.Tb tb = 1;


    pub fn get_tb(&self) -> &Ta_Tb {
        self.tb.as_ref().unwrap_or_else(|| Ta_Tb::default_instance())
    }
    pub fn clear_tb(&mut self) {
        self.tb.clear();
    }

    pub fn has_tb(&self) -> bool {
        self.tb.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tb(&mut self, v: Ta_Tb) {
        self.tb = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tb(&mut self) -> &mut Ta_Tb {
        if self.tb.is_none() {
            self.tb.set_default();
        }
        self.tb.as_mut().unwrap()
    }

    // Take field
    pub fn take_tb(&mut self) -> Ta_Tb {
        self.tb.take().unwrap_or_else(|| Ta_Tb::new())
    }
}

impl ::protobuf::Message for Ta {
    fn is_initialized(&self) -> bool {
        for v in &self.tb {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tb)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.tb.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.tb.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Ta {
        Ta::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Ta_Tb>>(
                    "tb",
                    |m: &Ta| { &m.tb },
                    |m: &mut Ta| { &mut m.tb },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Ta>(
                    "Ta",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Ta {
        static mut instance: ::protobuf::lazy::Lazy<Ta> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Ta::new)
        }
    }
}

impl ::protobuf::Clear for Ta {
    fn clear(&mut self) {
        self.tb.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Ta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Ta {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Ta_Tb {
    // message fields
    pub name: ::std::string::String,
    pub email: ::std::string::String,
    pub tcs: ::protobuf::RepeatedField<Ta_Tb_Tc>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Ta_Tb {
    fn default() -> &'a Ta_Tb {
        <Ta_Tb as ::protobuf::Message>::default_instance()
    }
}

impl Ta_Tb {
    pub fn new() -> Ta_Tb {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string email = 3;


    pub fn get_email(&self) -> &str {
        &self.email
    }
    pub fn clear_email(&mut self) {
        self.email.clear();
    }

    // Param is passed by value, moved
    pub fn set_email(&mut self, v: ::std::string::String) {
        self.email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_email(&mut self) -> &mut ::std::string::String {
        &mut self.email
    }

    // Take field
    pub fn take_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.email, ::std::string::String::new())
    }

    // repeated .protodec.Ta.Tb.Tc tcs = 4;


    pub fn get_tcs(&self) -> &[Ta_Tb_Tc] {
        &self.tcs
    }
    pub fn clear_tcs(&mut self) {
        self.tcs.clear();
    }

    // Param is passed by value, moved
    pub fn set_tcs(&mut self, v: ::protobuf::RepeatedField<Ta_Tb_Tc>) {
        self.tcs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tcs(&mut self) -> &mut ::protobuf::RepeatedField<Ta_Tb_Tc> {
        &mut self.tcs
    }

    // Take field
    pub fn take_tcs(&mut self) -> ::protobuf::RepeatedField<Ta_Tb_Tc> {
        ::std::mem::replace(&mut self.tcs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Ta_Tb {
    fn is_initialized(&self) -> bool {
        for v in &self.tcs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.email)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tcs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.email);
        }
        for value in &self.tcs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.email.is_empty() {
            os.write_string(3, &self.email)?;
        }
        for v in &self.tcs {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Ta_Tb {
        Ta_Tb::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Ta_Tb| { &m.name },
                    |m: &mut Ta_Tb| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "email",
                    |m: &Ta_Tb| { &m.email },
                    |m: &mut Ta_Tb| { &mut m.email },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Ta_Tb_Tc>>(
                    "tcs",
                    |m: &Ta_Tb| { &m.tcs },
                    |m: &mut Ta_Tb| { &mut m.tcs },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Ta_Tb>(
                    "Ta.Tb",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Ta_Tb {
        static mut instance: ::protobuf::lazy::Lazy<Ta_Tb> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Ta_Tb::new)
        }
    }
}

impl ::protobuf::Clear for Ta_Tb {
    fn clear(&mut self) {
        self.name.clear();
        self.email.clear();
        self.tcs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Ta_Tb {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Ta_Tb {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Ta_Tb_Tc {
    // message fields
    pub number: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Ta_Tb_Tc {
    fn default() -> &'a Ta_Tb_Tc {
        <Ta_Tb_Tc as ::protobuf::Message>::default_instance()
    }
}

impl Ta_Tb_Tc {
    pub fn new() -> Ta_Tb_Tc {
        ::std::default::Default::default()
    }

    // string number = 1;


    pub fn get_number(&self) -> &str {
        &self.number
    }
    pub fn clear_number(&mut self) {
        self.number.clear();
    }

    // Param is passed by value, moved
    pub fn set_number(&mut self, v: ::std::string::String) {
        self.number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_number(&mut self) -> &mut ::std::string::String {
        &mut self.number
    }

    // Take field
    pub fn take_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.number, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Ta_Tb_Tc {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.number)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.number.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.number);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.number.is_empty() {
            os.write_string(1, &self.number)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Ta_Tb_Tc {
        Ta_Tb_Tc::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "number",
                    |m: &Ta_Tb_Tc| { &m.number },
                    |m: &mut Ta_Tb_Tc| { &mut m.number },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Ta_Tb_Tc>(
                    "Ta.Tb.Tc",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Ta_Tb_Tc {
        static mut instance: ::protobuf::lazy::Lazy<Ta_Tb_Tc> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Ta_Tb_Tc::new)
        }
    }
}

impl ::protobuf::Clear for Ta_Tb_Tc {
    fn clear(&mut self) {
        self.number.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Ta_Tb_Tc {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Ta_Tb_Tc {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RepeatedValues {
    // message fields
    pub param1: ::protobuf::RepeatedField<::std::string::String>,
    pub param2: ::std::vec::Vec<i64>,
    pub param3: ::std::vec::Vec<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RepeatedValues {
    fn default() -> &'a RepeatedValues {
        <RepeatedValues as ::protobuf::Message>::default_instance()
    }
}

impl RepeatedValues {
    pub fn new() -> RepeatedValues {
        ::std::default::Default::default()
    }

    // repeated string param1 = 1;


    pub fn get_param1(&self) -> &[::std::string::String] {
        &self.param1
    }
    pub fn clear_param1(&mut self) {
        self.param1.clear();
    }

    // Param is passed by value, moved
    pub fn set_param1(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.param1 = v;
    }

    // Mutable pointer to the field.
    pub fn mut_param1(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.param1
    }

    // Take field
    pub fn take_param1(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.param1, ::protobuf::RepeatedField::new())
    }

    // repeated int64 param2 = 2;


    pub fn get_param2(&self) -> &[i64] {
        &self.param2
    }
    pub fn clear_param2(&mut self) {
        self.param2.clear();
    }

    // Param is passed by value, moved
    pub fn set_param2(&mut self, v: ::std::vec::Vec<i64>) {
        self.param2 = v;
    }

    // Mutable pointer to the field.
    pub fn mut_param2(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.param2
    }

    // Take field
    pub fn take_param2(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.param2, ::std::vec::Vec::new())
    }

    // repeated bool param3 = 3;


    pub fn get_param3(&self) -> &[bool] {
        &self.param3
    }
    pub fn clear_param3(&mut self) {
        self.param3.clear();
    }

    // Param is passed by value, moved
    pub fn set_param3(&mut self, v: ::std::vec::Vec<bool>) {
        self.param3 = v;
    }

    // Mutable pointer to the field.
    pub fn mut_param3(&mut self) -> &mut ::std::vec::Vec<bool> {
        &mut self.param3
    }

    // Take field
    pub fn take_param3(&mut self) -> ::std::vec::Vec<bool> {
        ::std::mem::replace(&mut self.param3, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for RepeatedValues {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.param1)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.param2)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_bool_into(wire_type, is, &mut self.param3)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.param1 {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.param2 {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += 2 * self.param3.len() as u32;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.param1 {
            os.write_string(1, &v)?;
        };
        for v in &self.param2 {
            os.write_int64(2, *v)?;
        };
        for v in &self.param3 {
            os.write_bool(3, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RepeatedValues {
        RepeatedValues::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "param1",
                    |m: &RepeatedValues| { &m.param1 },
                    |m: &mut RepeatedValues| { &mut m.param1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "param2",
                    |m: &RepeatedValues| { &m.param2 },
                    |m: &mut RepeatedValues| { &mut m.param2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "param3",
                    |m: &RepeatedValues| { &m.param3 },
                    |m: &mut RepeatedValues| { &mut m.param3 },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<RepeatedValues>(
                    "RepeatedValues",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RepeatedValues {
        static mut instance: ::protobuf::lazy::Lazy<RepeatedValues> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(RepeatedValues::new)
        }
    }
}

impl ::protobuf::Clear for RepeatedValues {
    fn clear(&mut self) {
        self.param1.clear();
        self.param2.clear();
        self.param3.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RepeatedValues {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RepeatedValues {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ShortMessageForExample {
    // message fields
    pub name: ::std::string::String,
    pub age: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ShortMessageForExample {
    fn default() -> &'a ShortMessageForExample {
        <ShortMessageForExample as ::protobuf::Message>::default_instance()
    }
}

impl ShortMessageForExample {
    pub fn new() -> ShortMessageForExample {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int32 age = 2;


    pub fn get_age(&self) -> i32 {
        self.age
    }
    pub fn clear_age(&mut self) {
        self.age = 0;
    }

    // Param is passed by value, moved
    pub fn set_age(&mut self, v: i32) {
        self.age = v;
    }
}

impl ::protobuf::Message for ShortMessageForExample {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.age = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.age != 0 {
            my_size += ::protobuf::rt::value_size(2, self.age, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.age != 0 {
            os.write_int32(2, self.age)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShortMessageForExample {
        ShortMessageForExample::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &ShortMessageForExample| { &m.name },
                    |m: &mut ShortMessageForExample| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "age",
                    |m: &ShortMessageForExample| { &m.age },
                    |m: &mut ShortMessageForExample| { &mut m.age },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ShortMessageForExample>(
                    "ShortMessageForExample",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ShortMessageForExample {
        static mut instance: ::protobuf::lazy::Lazy<ShortMessageForExample> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ShortMessageForExample::new)
        }
    }
}

impl ::protobuf::Clear for ShortMessageForExample {
    fn clear(&mut self) {
        self.name.clear();
        self.age = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShortMessageForExample {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShortMessageForExample {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ftest_data.proto\x12\x08protodec\x1a\x1fgoogle/protobuf/timestamp.p\
    roto\"\xbb\x02\n\x06Person\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\
    \x12\x0e\n\x02id\x18\x02\x20\x01(\x05R\x02id\x12\x14\n\x05email\x18\x03\
    \x20\x01(\tR\x05email\x124\n\x06phones\x18\x04\x20\x03(\x0b2\x1c.protode\
    c.Person.PhoneNumberR\x06phones\x12=\n\x0clast_updated\x18\x05\x20\x01(\
    \x0b2\x1a.google.protobuf.TimestampR\x0blastUpdated\x1aU\n\x0bPhoneNumbe\
    r\x12\x16\n\x06number\x18\x01\x20\x01(\tR\x06number\x12.\n\x04type\x18\
    \x02\x20\x01(\x0e2\x1a.protodec.Person.PhoneTypeR\x04type\"+\n\tPhoneTyp\
    e\x12\n\n\x06MOBILE\x10\0\x12\x08\n\x04HOME\x10\x01\x12\x08\n\x04WORK\
    \x10\x02\"7\n\x0bAddressBook\x12(\n\x06people\x18\x01\x20\x03(\x0b2\x10.\
    protodec.PersonR\x06people\"%\n\rStringWrapper\x12\x14\n\x05value\x18\
    \x01\x20\x01(\tR\x05value\"E\n\x14StringWrapperWrapper\x12-\n\x05value\
    \x18\x01\x20\x01(\x0b2\x17.protodec.StringWrapperR\x05value\"\"\n\nI32Wr\
    apper\x12\x14\n\x05value\x18\x01\x20\x01(\x05R\x05value\"\xa4\x01\n\tBig\
    Object\x128\n\x0caddress_book\x18\x01\x20\x01(\x0b2\x15.protodec.Address\
    BookR\x0baddressBook\x12]\n\x19different_numbers_wrapper\x18\x02\x20\x01\
    (\x0b2!.protodec.DifferentNumbersWrapperR\x17differentNumbersWrapper\"\
    \xa2\x03\n\x17DifferentNumbersWrapper\x12!\n\x0cvalue_double\x18\x01\x20\
    \x01(\x01R\x0bvalueDouble\x12\x1f\n\x0bvalue_int32\x18\x02\x20\x01(\x05R\
    \nvalueInt32\x12\x1f\n\x0bvalue_int64\x18\x03\x20\x01(\x03R\nvalueInt64\
    \x12!\n\x0cvalue_uint32\x18\x04\x20\x01(\rR\x0bvalueUint32\x12!\n\x0cval\
    ue_uint64\x18\x05\x20\x01(\x04R\x0bvalueUint64\x12!\n\x0cvalue_sint32\
    \x18\x06\x20\x01(\x11R\x0bvalueSint32\x12!\n\x0cvalue_sint64\x18\x07\x20\
    \x01(\x12R\x0bvalueSint64\x12#\n\rvalue_fixed32\x18\x08\x20\x01(\x07R\
    \x0cvalueFixed32\x12#\n\rvalue_fixed64\x18\t\x20\x01(\x06R\x0cvalueFixed\
    64\x12%\n\x0evalue_sfixed32\x18\n\x20\x01(\x0fR\rvalueSfixed32\x12%\n\
    \x0evalue_sfixed64\x18\x0b\x20\x01(\x10R\rvalueSfixed64\"\x99\x01\n\x02T\
    a\x12\x1f\n\x02tb\x18\x01\x20\x01(\x0b2\x0f.protodec.Ta.TbR\x02tb\x1ar\n\
    \x02Tb\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x14\n\x05email\
    \x18\x03\x20\x01(\tR\x05email\x12$\n\x03tcs\x18\x04\x20\x03(\x0b2\x12.pr\
    otodec.Ta.Tb.TcR\x03tcs\x1a\x1c\n\x02Tc\x12\x16\n\x06number\x18\x01\x20\
    \x01(\tR\x06number\"X\n\x0eRepeatedValues\x12\x16\n\x06param1\x18\x01\
    \x20\x03(\tR\x06param1\x12\x16\n\x06param2\x18\x02\x20\x03(\x03R\x06para\
    m2\x12\x16\n\x06param3\x18\x03\x20\x03(\x08R\x06param3\">\n\x16ShortMess\
    ageForExample\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x10\n\
    \x03age\x18\x02\x20\x01(\x05R\x03ageb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
